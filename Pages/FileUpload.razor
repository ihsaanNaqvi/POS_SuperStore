@page "/upload"

@using System.ComponentModel.DataAnnotations
@using Telerik.Blazor.Components.Upload
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop

<div class="demo-section k-form k-form-md k-form-horizontal">
    @if (string.IsNullOrEmpty(SuccessMessage))
    {
        <EditForm EditContext="@MyEditContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />

            @if (NotValid)
            {
                <div class="demo-alert demo-alert-error">
                    <ValidationSummary />
                </div>
            }

            <div class="k-form-field">
                <label for="name" class="k-label k-form-label">Name:</label>
                <div class="k-form-field-wrap">
                    <TelerikTextBox @bind-Value="@currentForm.Name" Id="name" />
                </div>
            </div>
            <div class="k-form-field">
                <label for="email" class="k-label k-form-label">Email:</label>
                <div class="k-form-field-wrap">
                    <TelerikTextBox @bind-Value="@currentForm.Email" Id="email" />
                </div>
            </div>
            <div class="k-form-field">
                <label class="k-label k-form-label">CV:</label>
                <div class="k-form-field-wrap">
                    <TelerikUpload SaveUrl="@SaveUrl"
                               RemoveUrl="@RemoveUrl"
                               AllowedExtensions="@( new List<string>() { ".pdf", ".docx" } )"
                               OnSelect="@OnSelectHandler"
                               OnCancel="@OnCancelHandler"
                               OnRemove="@OnRemoveHandler">
                    </TelerikUpload>
                    <div class="k-form-hint">Accepted files: <strong>PDF and DOCX</strong></div>
                </div>
            </div>

            <div class="text-right">
                <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Submit Application</TelerikButton>
            </div>
        </EditForm>
    }
    else
    {
        <div class="demo-alert demo-alert-success" role="alert">
            @SuccessMessage
            <br />
            <TelerikButton ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@BackToForm">Go back</TelerikButton>
        </div>
    }
</div>

@code {
    // setup upload endpoints
    public string SaveUrl => ToAbsoluteUrl("api/upload/save");
    public string RemoveUrl => ToAbsoluteUrl("api/upload/remove");

    public string ToAbsoluteUrl(string url)
    {
        return $"{NavigationManager.BaseUri}{url}";
    }

    // setup validation, this is a workaround because file validation does not exist in the framework
    // see more here https://github.com/dotnet/aspnetcore/issues/18821
    JobApplicationForm currentForm { get; set; }
    protected EditContext MyEditContext { get; set; }

    private bool NotValid => MyEditContext.GetValidationMessages().Any();
    Dictionary<string, bool> FilesValidationInfo { get; set; } = new Dictionary<string, bool>();

    protected override void OnInitialized()
    {
        currentForm = new JobApplicationForm();
        MyEditContext = new EditContext(currentForm);
    }

    void OnSelectHandler(UploadSelectEventArgs e)
    {
        foreach (var item in e.Files)
        {
            if (!FilesValidationInfo.Keys.Contains(item.Id))
            {
                // nothing is assumed to be valid until the server returns an OK
                FilesValidationInfo.Add(item.Id, IsSelectedFileValid(item));
            }
        }

        UpdateValidationModel();
    }

    void OnCancelHandler(UploadCancelEventArgs e)
    {
        RemoveFailedFilesFromList(e.Files);
        UpdateValidationModel();
    }

    void OnRemoveHandler(UploadEventArgs e)
    {
        RemoveFailedFilesFromList(e.Files);
        UpdateValidationModel();
    }

    void RemoveFailedFilesFromList(List<UploadFileInfo> files)
    {
        foreach (var file in files)
        {
            if (FilesValidationInfo.Keys.Contains(file.Id))
            {
                FilesValidationInfo.Remove(file.Id);
            }
        }
    }

    bool IsSelectedFileValid(UploadFileInfo file)
    {
        return !(file.InvalidExtension || file.InvalidMaxFileSize || file.InvalidMinFileSize);
    }

    void UpdateValidationModel()
    {
        bool areAllUploadedFilesValid = false;

        if (FilesValidationInfo.Keys.Count > 0 &&
            !FilesValidationInfo.Values.Contains(false))
        {
            areAllUploadedFilesValid = true;
        }

        currentForm.IsResumeValid = areAllUploadedFilesValid;

        // we update the validation state out of the standard form cycle and events
        // so we need an EditContext that we can call upon to re-evaluate the validation
        MyEditContext.Validate();
    }


    // sample model
    public class JobApplicationForm
    {
        [Required(ErrorMessage = "Enter your name")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Enter your email")]
        [EmailAddress(ErrorMessage = "Please provide a valid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Please upload a resume - PDF or DOCX files only")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "Please upload a resume - PDF or DOCX files only")]
        public bool IsResumeValid { get; set; }
    }

    // UI for the demo to showcase changes to the form validation and success
    string SuccessMessage = string.Empty;

    void HandleValidSubmit()
    {
        SuccessMessage = "Form Submitted Successfully! We will get back to you.";
    }

    void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }

    async Task BackToForm()
    {
        await JsInterop.InvokeVoidAsync("window.location.reload");
    }
}